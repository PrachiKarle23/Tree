class Solution {
  public:
    int height(Node* root){
        if(root==NULL){
            return 0;
        }
        int left=height(root->left);
        int right=height(root->right);
        int ans=max(left,right)+1;
        return ans;
    }
    pair<int,int> diameterFast(Node* root){
        if(root==NULL){
           pair<int,int>p=make_pair(0,0);
           return p;
        }
        pair<int,int>left=diameterFast(root->left);
        pair<int,int>right=diameterFast(root->right);
        
        int op1=left.first;
        int op2=right.first;
        int op3=left.second+right.second+1;
        
        pair<int,int>ans;
        ans.first=max(op1,max(op2,op3));
        ans.second=max(left.second,right.second)+1;
        
        return ans;
    }
    int diameter(Node* root) {
        // if(root=NULL){
        //     return 0;
        // }
        // int op1=diameter(root->left);
        // int op2=diameter(root->right);
        // int op3=height(root->left)+height(root->right)+1;
        // return max(op1,max(op2,op3));
        
        pair<int,int>ans=diameterFast(root);
        ans.first;
    }
};

//diameter without root node
class Solution {
public:
    int height(TreeNode* root)
    {
        if(root==NULL){
            return 0;
        }
        int left=height(root->left);
        int right=height(root->right);
        return max(left,right)+1;
    }
    int diameterOfBinaryTree(TreeNode* root) {
        if(root==NULL){
            return 0;
        }
        int left=diameterOfBinaryTree(root->left);
        int right=diameterOfBinaryTree(root->right);
        int op=height(root->left)+height(root->right);
        return max(left,max(right,op));
    }
};
