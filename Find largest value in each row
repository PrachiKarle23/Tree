//Approach 1
class Solution {
public:
    void solve1(vector<int>a,vector<int>& ans)
    {
        int maxi=INT_MIN;
        for(int i=0;i<a.size();i++){
             if(a[i]>maxi){
                maxi=a[i];
             }
        }
        ans.push_back(maxi);
    }
    void solve(TreeNode* root,vector<int>a,vector<int>& ans)
    {
        queue<TreeNode*>q;
        q.push(root);
        q.push(NULL);
        while(!q.empty())
        {
            TreeNode* temp=q.front();
            q.pop();
            if(temp==NULL){
                if(a.size()!=0){
                   solve1(a,ans);
                   q.push(NULL);
                   a.clear();
                }
            }
            else{
                a.push_back(temp->val);
                if(temp->left){
                    q.push(temp->left);
                }
                if(temp->right){
                    q.push(temp->right);
                }
            }
        }
    }
    vector<int> largestValues(TreeNode* root) {
        vector<int>a;
        vector<int>ans;
        solve(root,a,ans);
        return ans;
    }
};

//Approach 2
class Solution {
public:
    void solve(TreeNode* root,vector<int>& ans,int &cnt)
    {
        queue<TreeNode*>q;
        q.push(root);
        q.push(NULL);
        int maxi=INT_MIN;
        while(!q.empty())
        {
            TreeNode* temp=q.front();
            q.pop();
            if(temp==NULL){
                if(cnt!=0){
                   ans.push_back(maxi);
                   q.push(NULL);
                   cnt=0;
                   maxi=INT_MIN;
                }
            }
            else{
                if(temp->val>maxi){
                    maxi=temp->val;
                }
                cnt++;
                if(temp->left){
                    q.push(temp->left);
                }
                if(temp->right){
                    q.push(temp->right);
                }
            }
        }
    }
    vector<int> largestValues(TreeNode* root) {
        vector<int>ans;
        int cnt=0;
        solve(root,ans,cnt);
        return ans;
    }
};
