void solve(Node* root,vector<int>a,vector<int>& ans)
{
    queue<Node*>q;
    q.push(root);
    q.push(NULL);
    while(!q.empty())
    {
        Node* temp=q.front();
        q.pop();
        if(temp==NULL){
            if(a.size()!=0){
                ans.push_back(a[0]);
                q.push(NULL);
                a.clear();
            }
        }
        else{
            a.push_back(temp->data);
            if(temp->left){
                q.push(temp->left);
            }
            if(temp->right){
                q.push(temp->right);
            }
        }
    }
}
vector<int> leftView(Node *root)
{
   vector<int>a;
   vector<int>ans;
   solve(root,a,ans);
   return ans;
}


//Approach 2
void solve(Node* root,vector<int>& ans){
    if(root==NULL){
        return;
    }
    ans.push_back(root->data);
    if(root->left){
        solve(root->left,ans);
    }
    else if(root->right){
        solve(root->right,ans);
    }
}
vector<int> leftView(Node *root)
{
   vector<int>ans;
   solve(root,ans);
   return ans;
}
