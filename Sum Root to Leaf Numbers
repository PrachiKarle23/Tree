class Solution {
public:
    void solve(TreeNode* root,vector<int>&ans,int n){
        if(root->left==NULL && root->right==NULL){
            n=n*10+root->val;
            ans.push_back(n);
            return;
        }
        n=n*10+root->val;
        if(root->left){
            solve(root->left,ans,n);
        }
        if(root->right){
            solve(root->right,ans,n);
        }
    }
    int sumNumbers(TreeNode* root) {
        if(root==NULL){
            return 0;
        }
        vector<int>ans;
        solve(root,ans,0);
        int sum=0;
        for(int i=0;i<ans.size();i++)
        {
            sum+=ans[i];
        }
        return sum;
    }
};

//approach 2
class Solution {
public:
    void solve(TreeNode* root,int &ans,int n){
        if(root->left==NULL && root->right==NULL){
            n=n*10+root->val;
            ans+=n;
            return;
        }
        n=n*10+root->val;
        if(root->left){
            solve(root->left,ans,n);
        }
        if(root->right){
            solve(root->right,ans,n);
        }
    }
    int sumNumbers(TreeNode* root) {
        if(root==NULL){
            return 0;
        }
        int ans=0;
        solve(root,ans,0);
        return ans;
    }
};
